pipeline {
  agent any
  environment {
    IMAGE_PREFIX = '117.102.70.147'
	  IMAGE_APP_NAME = 'unigo-microsite-kurir-service'
    IMAGE_TAG = 'latest'
    PRIVATE_REGISTRY_URL = '117.102.70.147'
    PRIVATE_REGISTRY_USER = 'devofficial'
    PRIVATE_REGISTRY_PASSWORD = 'Thomas110515'
    DOCKER_NETWORK = 'unigoplatformnet'
    DOCKER_LOG_PATH = '/home/unigo/microsite/logs'
	  SERVER_ADDRESS = '117.102.70.147'
    SERVER_SSH_PORT = '9900'
    SERVER_SSH_USER = 'deden'
    SERVER_SSH_PASSWORD = 'Thomas110515'
  }
  stages {
    stage('Build image') {
      steps {
        sh 'docker build -f Dockerfile.sandbox -t $IMAGE_PREFIX/$IMAGE_APP_NAME:$IMAGE_TAG .'
      }
    }
    stage('Push to docker private registry') {
      steps {
        sh '''
          docker login --username=$PRIVATE_REGISTRY_USER --password=$PRIVATE_REGISTRY_PASSWORD  $PRIVATE_REGISTRY_URL
          docker tag $IMAGE_PREFIX/$IMAGE_APP_NAME:$IMAGE_TAG $IMAGE_PREFIX/$IMAGE_APP_NAME
          docker push $IMAGE_PREFIX/$IMAGE_APP_NAME
          docker logout $PRIVATE_REGISTRY_URL
        '''
      }
    }
    stage('deploy to server') {
      steps {
        script {
          sh 'apt-get update && apt-get install -y sshpass'
          
          def result = sh(script: "sshpass -p $SERVER_SSH_PASSWORD ssh -o StrictHostKeyChecking=no -p $SERVER_SSH_PORT $SERVER_SSH_USER@$SERVER_ADDRESS 'echo $SERVER_SSH_PASSWORD | sudo -S docker ps -q -f status=running -f name=$IMAGE_APP_NAME'", returnStdout: true).trim()

          if (result) {
              echo "Container $IMAGE_APP_NAME exists. So, container must be stop"
              sh "sshpass -p $SERVER_SSH_PASSWORD ssh -o StrictHostKeyChecking=no -p $SERVER_SSH_PORT $SERVER_SSH_USER@$SERVER_ADDRESS 'echo $SERVER_SSH_PASSWORD | sudo -S docker stop $IMAGE_APP_NAME'"
          }

          sh "sshpass -p $SERVER_SSH_PASSWORD ssh -o StrictHostKeyChecking=no -p $SERVER_SSH_PORT $SERVER_SSH_USER@$SERVER_ADDRESS 'echo $SERVER_SSH_PASSWORD | sudo -S docker login --username=$PRIVATE_REGISTRY_USER --password=$PRIVATE_REGISTRY_PASSWORD  $PRIVATE_REGISTRY_URL'"

          sh "sshpass -p $SERVER_SSH_PASSWORD ssh -o StrictHostKeyChecking=no -p $SERVER_SSH_PORT $SERVER_SSH_USER@$SERVER_ADDRESS 'echo $SERVER_SSH_PASSWORD | sudo -S docker pull $IMAGE_PREFIX/$IMAGE_APP_NAME:$IMAGE_TAG'"

          sh "sshpass -p $SERVER_SSH_PASSWORD ssh -o StrictHostKeyChecking=no -p $SERVER_SSH_PORT $SERVER_SSH_USER@$SERVER_ADDRESS 'echo $SERVER_SSH_PASSWORD | sudo -S docker run -p 8081:3001 -d --rm echo Thomas110515 | sudo -S docker run -p 8081:3001 -d --rm \
-e DOTENV_PRIVATE_KEY_SANDBOX=ef71bfa8e4a4afd786767147d1b23a968930783689a9a55a02d26f26d0c9311a -v $DOCKER_LOG_PATH:/var/www/storage/logs --name $IMAGE_APP_NAME --network $DOCKER_NETWORK $IMAGE_PREFIX/$IMAGE_APP_NAME:$IMAGE_TAG'"

          sh "sshpass -p $SERVER_SSH_PASSWORD ssh -o StrictHostKeyChecking=no -p $SERVER_SSH_PORT $SERVER_SSH_USER@$SERVER_ADDRESS 'echo $SERVER_SSH_PASSWORD | sudo -S docker logout $PRIVATE_REGISTRY_URL'"

          sh "exit"
        }
      }
    }
  }
}
